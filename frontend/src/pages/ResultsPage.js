import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { 
  BarChart3, 
  DollarSign, 
  Heart, 
  Star, 
  CheckCircle, 
  AlertCircle, 
  ArrowRight, 
  Download,
  Share2,
  Filter,
  SortAsc,
  Eye
} from 'lucide-react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import InsuranceTooltip from '../components/InsuranceTooltip';

const ResultsPage = () => {
  const navigate = useNavigate();
  const [userData, setUserData] = useState(null);
  const [recommendations, setRecommendations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [sortBy, setSortBy] = useState('recommendation');
  const [filterType, setFilterType] = useState('all');

  // Mock data - in real app, this would come from your backend
  const mockRecommendations = [
    {
      id: 1,
      name: "Blue Cross Blue Shield Gold PPO",
      company: "Blue Cross Blue Shield",
      type: "PPO",
      monthlyPremium: 450,
      deductible: 1500,
      outOfPocketMax: 6500,
      copay: 25,
      rating: 4.8,
      recommendation: "Best Overall",
      pros: [], // Will be generated by frontend
      cons: [], // Will be generated by frontend
      bestFor: "Families with regular healthcare needs",
      annualCost: 5400,
      savings: 1200,
      features: ["Prescription coverage", "Mental health", "Preventive care", "Emergency coverage"]
    },
    {
      id: 2,
      name: "Aetna Silver HMO",
      company: "Aetna",
      type: "HMO",
      monthlyPremium: 320,
      deductible: 2500,
      outOfPocketMax: 8000,
      copay: 35,
      rating: 4.5,
      recommendation: "Best Value",
      pros: [], // Will be generated by frontend
      cons: [], // Will be generated by frontend
      bestFor: "Healthy individuals on a budget",
      annualCost: 3840,
      savings: 800,
      features: ["Prescription coverage", "Preventive care", "Emergency coverage"]
    },
    {
      id: 3,
      name: "UnitedHealthcare Bronze HDHP",
      company: "UnitedHealthcare",
      type: "HDHP",
      monthlyPremium: 280,
      deductible: 4000,
      outOfPocketMax: 7000,
      copay: 0,
      rating: 4.2,
      recommendation: "Lowest Cost",
      pros: [], // Will be generated by frontend
      cons: [], // Will be generated by frontend
      bestFor: "Young, healthy individuals",
      annualCost: 3360,
      savings: 1500,
      features: ["HSA eligible", "Preventive care", "Emergency coverage"]
    }
  ];

  useEffect(() => {
    // Load user data and results from localStorage
    const storedData = localStorage.getItem('userData');
    const storedResults = localStorage.getItem('comparisonResults');
    
    if (storedData) {
      setUserData(JSON.parse(storedData));
    }

    if (storedResults) {
      const results = JSON.parse(storedResults);
      // Check if the stored results have empty pros/cons (new format) or old hardcoded ones
      const hasOldProsCons = results.recommendations && 
                            results.recommendations.length > 0 && 
                            results.recommendations[0].pros && 
                            results.recommendations[0].pros.length > 0;
      
      if (hasOldProsCons) {
        // Clear old cached results to force regeneration
        localStorage.removeItem('comparisonResults');
        setRecommendations([]);
        setLoading(false);
      } else {
        setRecommendations(results.recommendations || []);
        setLoading(false);
      }
    } else {
      // Fallback to mock data if no results found
      setTimeout(() => {
        setRecommendations(mockRecommendations);
        setLoading(false);
      }, 1000);
    }
  }, []);

  const chartData = recommendations.map(plan => ({
    name: plan.name.split(' ')[0],
    premium: plan.monthlyPremium,
    deductible: plan.deductible,
    outOfPocket: plan.outOfPocketMax
  }));

  const costComparisonData = recommendations.map(plan => ({
    name: plan.name.split(' ')[0],
    annualCost: plan.annualCost,
    savings: plan.savings
  }));

  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444'];

  const sortedRecommendations = [...recommendations].sort((a, b) => {
    switch (sortBy) {
      case 'premium':
        return a.monthlyPremium - b.monthlyPremium;
      case 'deductible':
        return a.deductible - b.deductible;
      case 'rating':
        return b.rating - a.rating;
      case 'recommendation':
      default:
        return a.id - b.id;
    }
  });

  const filteredRecommendations = sortedRecommendations.filter(plan => {
    if (filterType === 'all') return true;
    return plan.type === filterType;
  });

  // Function to generate pros and cons based on plan characteristics and user profile
  const generateProsAndCons = (plan, allPlans, userProfile) => {
    console.log('generateProsAndCons called with:', { plan, allPlans, userProfile });
    
    const pros = [];
    const cons = [];
    
    // Calculate averages for comparison
    const avgPremium = allPlans.reduce((sum, p) => sum + p.monthlyPremium, 0) / allPlans.length;
    const avgDeductible = allPlans.reduce((sum, p) => sum + p.deductible, 0) / allPlans.length;
    const avgOutOfPocket = allPlans.reduce((sum, p) => sum + p.outOfPocketMax, 0) / allPlans.length;
    
    console.log('Averages calculated:', { avgPremium, avgDeductible, avgOutOfPocket });
    
    // Premium analysis
    if (plan.monthlyPremium < avgPremium * 0.8) {
      pros.push("Very low monthly premium");
    } else if (plan.monthlyPremium < avgPremium) {
      pros.push("Below average monthly premium");
    } else if (plan.monthlyPremium > avgPremium * 1.2) {
      cons.push("Higher than average monthly premium");
    }
    
    // Deductible analysis
    if (plan.deductible < avgDeductible * 0.7) {
      pros.push("Low deductible");
    } else if (plan.deductible > avgDeductible * 1.3) {
      cons.push("High deductible");
    }
    
    // Out-of-pocket max analysis
    if (plan.outOfPocketMax < avgOutOfPocket * 0.8) {
      pros.push("Low out-of-pocket maximum");
    } else if (plan.outOfPocketMax > avgOutOfPocket * 1.2) {
      cons.push("High out-of-pocket maximum");
    }
    
    // Plan type specific analysis
    if (plan.type === 'PPO') {
      pros.push("Flexible network - see any doctor");
      pros.push("Out-of-network coverage available");
      if (plan.monthlyPremium > avgPremium) {
        cons.push("PPO flexibility comes with higher cost");
      }
    } else if (plan.type === 'HMO') {
      pros.push("Lower cost than PPO plans");
      cons.push("Requires referrals for specialists");
      cons.push("Limited to network providers");
    } else if (plan.type === 'HDHP') {
      pros.push("HSA eligible for tax savings");
      pros.push("Lowest monthly premiums");
      cons.push("High deductible before coverage starts");
      cons.push("May not be ideal for frequent healthcare use");
    }
    
    // User profile specific analysis
    if (userProfile) {
      if (userProfile.healthConditions && userProfile.healthConditions.length > 0 && userProfile.healthConditions[0] !== 'None') {
        if (plan.deductible > avgDeductible) {
          cons.push("High deductible may not be ideal for your health conditions");
        }
        if (plan.type === 'HMO') {
          cons.push("HMO restrictions may limit specialist access for your conditions");
        }
      }
      
      if (userProfile.prescriptionMeds === 'yes') {
        if (plan.type === 'HDHP') {
          cons.push("High deductible applies to prescription costs");
        }
      }
      
      if (userProfile.priority === 'cost-savings') {
        if (plan.monthlyPremium < avgPremium) {
          pros.push("Great choice for cost-conscious individuals");
        }
      } else if (userProfile.priority === 'comprehensive-coverage') {
        if (plan.type === 'PPO') {
          pros.push("Excellent comprehensive coverage");
        }
      }
    }
    
    // Ensure we have at least some pros and cons
    if (pros.length === 0) {
      pros.push("Good overall value");
    }
    if (cons.length === 0) {
      cons.push("No major drawbacks");
    }
    
    console.log('Final pros and cons:', { pros, cons });
    return { pros, cons };
  };

  // State for AI advice
  const [aiAdvice, setAiAdvice] = useState(null);
  const [aiAdviceLoading, setAiAdviceLoading] = useState(false);

  // Function to fetch AI advice from backend
  const fetchAIAdvice = async () => {
    if (!userData) return;
    
    setAiAdviceLoading(true);
    try {
      const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/ai-advice`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userProfile: userData
        })
      });

      if (response.ok) {
        const data = await response.json();
        setAiAdvice(data);
      } else {
        console.error('Failed to fetch AI advice');
        // Fallback to rule-based advice
        setAiAdvice({
          advice: generateFallbackAdvice(userData, recommendations),
          keyPoints: ["Consider total annual costs", "Evaluate provider networks"],
          riskFactors: ["High deductibles may be challenging"],
          recommendations: ["Review plan details carefully"]
        });
      }
    } catch (error) {
      console.error('Error fetching AI advice:', error);
      // Fallback to rule-based advice
      setAiAdvice({
        advice: generateFallbackAdvice(userData, recommendations),
        keyPoints: ["Consider total annual costs", "Evaluate provider networks"],
        riskFactors: ["High deductibles may be challenging"],
        recommendations: ["Review plan details carefully"]
      });
    } finally {
      setAiAdviceLoading(false);
    }
  };

  // Fallback function for when AI is not available
  const generateFallbackAdvice = (userProfile, recommendations) => {
    if (!userProfile || !recommendations || recommendations.length === 0) {
      return "Based on your profile, we recommend focusing on plans that offer good value and comprehensive coverage. Consider your healthcare needs and budget when making your final decision.";
    }

    const avgPremium = recommendations.reduce((sum, plan) => sum + plan.monthlyPremium, 0) / recommendations.length;
    const avgDeductible = recommendations.reduce((sum, plan) => sum + plan.deductible, 0) / recommendations.length;
    const bestPlan = recommendations[0];

    let advice = [];

    // Age-based advice
    if (userProfile.age < 30) {
      advice.push("Young adults typically benefit from lower-cost plans with higher deductibles.");
    } else if (userProfile.age > 50) {
      advice.push("Older adults should prioritize comprehensive coverage with lower deductibles.");
    }

    // Family size advice
    if (userProfile.familySize > 1) {
      advice.push("Families need plans with good dependent coverage and reasonable out-of-pocket maximums.");
    }

    // Health conditions advice
    if (userProfile.healthConditions && userProfile.healthConditions.length > 0 && userProfile.healthConditions[0] !== 'None') {
      advice.push("With health conditions, prioritize lower deductibles and comprehensive coverage.");
    }

    // Prescription medications advice
    if (userProfile.prescriptionMeds === 'yes') {
      advice.push("Regular prescriptions require plans with good medication coverage.");
    }

    // Income-based advice
    if (userProfile.income === 'under-25000' || userProfile.income === '25000-50000') {
      advice.push("Lower income levels should focus on affordable premiums and potential subsidies.");
    } else if (userProfile.income === 'over-150000') {
      advice.push("Higher income allows for more comprehensive coverage options.");
    }

    // Priority-based advice
    if (userProfile.priority === 'lowest-cost') {
      advice.push("Cost-conscious individuals should consider HDHP plans with HSA benefits.");
    } else if (userProfile.priority === 'best-coverage') {
      advice.push("PPO plans offer maximum flexibility and specialist access.");
    } else if (userProfile.priority === 'lowest-deductible') {
      advice.push("Low deductibles typically come with higher premiums but lower out-of-pocket costs.");
    }

    // Plan-specific recommendations
    if (bestPlan) {
      if (bestPlan.type === 'PPO') {
        advice.push("Your top recommendation is a PPO plan offering flexibility and out-of-network coverage.");
      } else if (bestPlan.type === 'HMO') {
        advice.push("Your top recommendation is an HMO plan with lower costs but network restrictions.");
      } else if (bestPlan.type === 'HDHP') {
        advice.push("Your top recommendation is an HDHP plan with low premiums and HSA eligibility.");
      }
    }

    // Cost analysis
    if (bestPlan && bestPlan.monthlyPremium < avgPremium * 0.8) {
      advice.push("Your recommended plan offers significantly lower premiums than average.");
    }

    if (bestPlan && bestPlan.deductible < avgDeductible * 0.7) {
      advice.push("The low deductible means less out-of-pocket expense before coverage starts.");
    }

    // Final recommendation
    advice.push("Review provider networks and consider your expected healthcare usage for the year.");

    return advice.join(" ");
  };

  // Fetch AI advice when component mounts
  useEffect(() => {
    if (userData && recommendations.length > 0) {
      fetchAIAdvice();
    }
  }, [userData, recommendations]);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4"></div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Analyzing Your Options</h2>
          <p className="text-gray-600">Our AI is comparing plans based on your profile...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
          >
            <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              Your Personalized Recommendations
            </h1>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              Based on your profile, we've found {recommendations.length} plans that match your needs
            </p>
          </motion.div>
        </div>

        {/* Summary Cards */}
        <div className="grid md:grid-cols-3 gap-6 mb-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.1 }}
            className="bg-white rounded-xl shadow-sm p-6"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Average Monthly Premium</p>
                <p className="text-2xl font-bold text-gray-900">
                  ${Math.round(recommendations.reduce((sum, plan) => sum + plan.monthlyPremium, 0) / recommendations.length)}
                </p>
              </div>
              <DollarSign className="w-8 h-8 text-primary-600" />
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="bg-white rounded-xl shadow-sm p-6"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Potential Annual Savings</p>
                <p className="text-2xl font-bold text-green-600">
                  ${Math.max(...recommendations.map(plan => plan.savings))}
                </p>
              </div>
              <Heart className="w-8 h-8 text-green-600" />
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.3 }}
            className="bg-white rounded-xl shadow-sm p-6"
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Top Rated Plan</p>
                <p className="text-2xl font-bold text-gray-900">
                  {Math.max(...recommendations.map(plan => plan.rating)).toFixed(1)}/5
                </p>
              </div>
              <Star className="w-8 h-8 text-yellow-500" />
            </div>
          </motion.div>
        </div>

        {/* Charts Section */}
        <div className="grid lg:grid-cols-2 gap-8 mb-8">
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6, delay: 0.4 }}
            className="bg-white rounded-xl shadow-sm p-6"
          >
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Cost Comparison</h3>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={chartData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="premium" fill="#3B82F6" name="Monthly Premium" />
                <Bar dataKey="deductible" fill="#10B981" name="Deductible" />
              </BarChart>
            </ResponsiveContainer>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6, delay: 0.5 }}
            className="bg-white rounded-xl shadow-sm p-6"
          >
            <div className="flex items-center space-x-3 mb-4">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                </svg>
              </div>
              <div>
                <h3 className="text-lg font-semibold text-gray-900">AI Personal Advice</h3>
                <p className="text-sm text-gray-600">Tailored recommendations for you</p>
              </div>
            </div>
            
            <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-4 border border-blue-100 max-h-80 overflow-y-auto">
              {aiAdviceLoading ? (
                <div className="flex items-center justify-center py-8">
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
                  <span className="ml-2 text-sm text-gray-600">Generating personalized advice...</span>
                </div>
              ) : aiAdvice ? (
                <div className="space-y-4">
                  <div className="text-sm text-gray-800 leading-relaxed">
                    {aiAdvice.advice}
                  </div>
                  
                  {aiAdvice.keyPoints && aiAdvice.keyPoints.length > 0 && (
                    <div>
                      <h4 className="font-semibold text-gray-900 text-sm mb-2">Key Points:</h4>
                      <ul className="text-xs text-gray-700 space-y-1">
                        {aiAdvice.keyPoints.map((point, idx) => (
                          <li key={idx} className="flex items-start">
                            <span className="w-1.5 h-1.5 bg-blue-600 rounded-full mt-1.5 mr-2 flex-shrink-0"></span>
                            {point}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                  
                  {aiAdvice.riskFactors && aiAdvice.riskFactors.length > 0 && (
                    <div>
                      <h4 className="font-semibold text-red-700 text-sm mb-2">Considerations:</h4>
                      <ul className="text-xs text-gray-700 space-y-1">
                        {aiAdvice.riskFactors.map((risk, idx) => (
                          <li key={idx} className="flex items-start">
                            <span className="w-1.5 h-1.5 bg-red-500 rounded-full mt-1.5 mr-2 flex-shrink-0"></span>
                            {risk}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                  
                  {aiAdvice.recommendations && aiAdvice.recommendations.length > 0 && (
                    <div>
                      <h4 className="font-semibold text-green-700 text-sm mb-2">Recommendations:</h4>
                      <ul className="text-xs text-gray-700 space-y-1">
                        {aiAdvice.recommendations.map((rec, idx) => (
                          <li key={idx} className="flex items-start">
                            <span className="w-1.5 h-1.5 bg-green-600 rounded-full mt-1.5 mr-2 flex-shrink-0"></span>
                            {rec}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              ) : (
                <div className="text-sm text-gray-600">
                  Loading personalized advice...
                </div>
              )}
            </div>
          </motion.div>
        </div>

        {/* Filters and Sort */}
        <div className="bg-white rounded-xl shadow-sm p-6 mb-8">
          <div className="flex flex-col sm:flex-row justify-between items-center space-y-4 sm:space-y-0">
            <div className="flex items-center space-x-4">
              <label className="text-sm font-medium text-gray-700">Filter by:</label>
              <select
                value={filterType}
                onChange={(e) => setFilterType(e.target.value)}
                className="border border-gray-300 rounded-lg px-3 py-2 text-sm"
              >
                <option value="all">All Plans</option>
                <option value="PPO">PPO</option>
                <option value="HMO">HMO</option>
                <option value="HDHP">HDHP</option>
              </select>
            </div>
            <div className="flex items-center space-x-4">
              <label className="text-sm font-medium text-gray-700">Sort by:</label>
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="border border-gray-300 rounded-lg px-3 py-2 text-sm"
              >
                <option value="recommendation">Recommendation</option>
                <option value="premium">Monthly Premium</option>
                <option value="deductible">Deductible</option>
                <option value="rating">Rating</option>
              </select>
            </div>
          </div>
        </div>

        {/* Plan Recommendations */}
        <div className="space-y-6">
          {filteredRecommendations.map((plan, index) => {
            // Always generate pros and cons, even if backend sent empty arrays
            console.log('Processing plan:', plan);
            console.log('All recommendations:', recommendations);
            console.log('User data:', userData);
            
            const { pros, cons } = generateProsAndCons(plan, recommendations, userData);
            console.log(`Plan ${plan.name}: Generated ${pros.length} pros, ${cons.length} cons`);
            console.log('Generated pros:', pros);
            console.log('Generated cons:', cons);
            return (
            <motion.div
              key={plan.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: index * 0.1 }}
              className="bg-white rounded-xl shadow-sm overflow-hidden cursor-pointer hover:shadow-md transition-shadow duration-200"
              onClick={() => navigate(`/plans/${encodeURIComponent(plan.name)}`, { state: { from: 'results' } })}
            >
              <div className="p-6">
                <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-4">
                  <div className="flex-1">
                    <div className="flex items-center space-x-3 mb-2">
                      <h3 className="text-xl font-semibold text-gray-900">{plan.name}</h3>
                      <InsuranceTooltip term="Plan Type">
                        <span className="px-2 py-1 bg-primary-100 text-primary-800 text-xs font-medium rounded-full">
                          {plan.type}
                        </span>
                      </InsuranceTooltip>
                      <div className="flex items-center space-x-1">
                        <Star className="w-4 h-4 text-yellow-500 fill-current" />
                        <span className="text-sm text-gray-600">{plan.rating}</span>
                      </div>
                    </div>
                    <p className="text-gray-600 mb-2">{plan.company}</p>
                    <div className="flex items-center space-x-2">
                      <span className="px-3 py-1 bg-green-100 text-green-800 text-sm font-medium rounded-full">
                        {plan.recommendation}
                      </span>
                    </div>
                  </div>
                  <div className="mt-4 lg:mt-0 lg:ml-6">
                    <div className="text-right">
                      <p className="text-3xl font-bold text-gray-900">${plan.monthlyPremium}</p>
                      <p className="text-sm text-gray-600">per month</p>
                    </div>
                  </div>
                </div>

                <div className="grid md:grid-cols-4 gap-4 mb-6">
                  <div className="text-center p-3 bg-gray-50 rounded-lg">
                    <InsuranceTooltip term="Deductible">
                      <p className="text-sm text-gray-600">Deductible</p>
                    </InsuranceTooltip>
                    <p className="text-lg font-semibold text-gray-900">${plan.deductible.toLocaleString()}</p>
                  </div>
                  <div className="text-center p-3 bg-gray-50 rounded-lg">
                    <InsuranceTooltip term="Out of Pocket Max">
                      <p className="text-sm text-gray-600">Out-of-Pocket Max</p>
                    </InsuranceTooltip>
                    <p className="text-lg font-semibold text-gray-900">${plan.outOfPocketMax.toLocaleString()}</p>
                  </div>
                  <div className="text-center p-3 bg-gray-50 rounded-lg">
                    <InsuranceTooltip term="Copay">
                      <p className="text-sm text-gray-600">Copay</p>
                    </InsuranceTooltip>
                    <p className="text-lg font-semibold text-gray-900">${plan.copay}</p>
                  </div>
                  <div className="text-center p-3 bg-gray-50 rounded-lg">
                    <InsuranceTooltip term="Annual Cost">
                      <p className="text-sm text-gray-600">Annual Cost</p>
                    </InsuranceTooltip>
                    <p className="text-lg font-semibold text-gray-900">${plan.annualCost.toLocaleString()}</p>
                  </div>
                </div>

                <div className="grid md:grid-cols-2 gap-6 mb-6">
                  <div>
                    <h4 className="font-semibold text-gray-900 mb-2">Best For</h4>
                    <p className="text-gray-600">{plan.bestFor}</p>
                  </div>
                  <div>
                    <h4 className="font-semibold text-gray-900 mb-2">Key Features</h4>
                    <div className="flex flex-wrap gap-2">
                      {plan.features.map((feature, idx) => (
                        <span key={idx} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">
                          {feature}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>

                <div className="grid md:grid-cols-2 gap-6 mb-6">
                  <div>
                    <h4 className="font-semibold text-gray-900 mb-2 flex items-center">
                      <CheckCircle className="w-4 h-4 text-green-600 mr-2" />
                      Pros
                    </h4>
                    <ul className="space-y-1">
                      {pros.map((pro, idx) => (
                        <li key={idx} className="text-sm text-gray-600 flex items-start">
                          <span className="w-1.5 h-1.5 bg-green-600 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                          {pro}
                        </li>
                      ))}
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold text-gray-900 mb-2 flex items-center">
                      <AlertCircle className="w-4 h-4 text-red-600 mr-2" />
                      Cons
                    </h4>
                    <ul className="space-y-1">
                      {cons.map((con, idx) => (
                        <li key={idx} className="text-sm text-gray-600 flex items-start">
                          <span className="w-1.5 h-1.5 bg-red-600 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                          {con}
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>

                <div className="flex flex-col sm:flex-row gap-3" onClick={(e) => e.stopPropagation()}>
                  <button 
                    className="flex-1 bg-primary-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-primary-700 transition-colors flex items-center justify-center"
                    onClick={() => navigate(`/plans/${encodeURIComponent(plan.name)}`, { state: { from: 'results' } })}
                  >
                    <Eye className="w-4 h-4 mr-2" />
                    View Full Details
                  </button>
                  <button className="flex-1 border border-primary-600 text-primary-600 px-6 py-3 rounded-lg font-medium hover:bg-primary-50 transition-colors flex items-center justify-center">
                    <Download className="w-4 h-4 mr-2" />
                    Download Summary
                  </button>
                  <button className="flex-1 border border-gray-300 text-gray-700 px-6 py-3 rounded-lg font-medium hover:bg-gray-50 transition-colors flex items-center justify-center">
                    <Share2 className="w-4 h-4 mr-2" />
                    Share
                  </button>
                </div>
              </div>
            </motion.div>
          );
          })}
        </div>

        {/* CTA Section */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.8 }}
          className="mt-12 bg-primary-600 rounded-xl p-8 text-center"
        >
          <h2 className="text-2xl font-bold text-white mb-4">
            Ready to Choose Your Plan?
          </h2>
          <p className="text-primary-100 mb-6 max-w-2xl mx-auto">
            Get in touch with our insurance experts to help you enroll in your chosen plan 
            and answer any questions you might have.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <button className="bg-white text-primary-600 px-8 py-3 rounded-lg font-semibold hover:bg-gray-50 transition-colors">
              Contact Expert
            </button>
            <Link
              to="/compare"
              className="border-2 border-white text-white px-8 py-3 rounded-lg font-semibold hover:bg-white hover:text-primary-600 transition-colors"
            >
              Compare Again
            </Link>
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default ResultsPage; 