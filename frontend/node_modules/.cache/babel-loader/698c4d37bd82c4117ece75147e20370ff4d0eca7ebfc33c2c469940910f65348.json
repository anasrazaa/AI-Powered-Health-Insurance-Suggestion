{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anasr\\\\Downloads\\\\HI\\\\RAG-For-Research-v3\\\\RAG-For-Research-v3\\\\frontend\\\\src\\\\components\\\\SafeErrorDisplay.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SafeErrorDisplay = ({\n  error,\n  className = \"text-red-500 text-sm mt-1\"\n}) => {\n  const getErrorMessage = error => {\n    try {\n      if (!error) return '';\n\n      // If it's already a string, return it\n      if (typeof error === 'string') return error;\n\n      // If it has a message property that's a string\n      if (error.message && typeof error.message === 'string') return error.message;\n\n      // If it has a msg property that's a string\n      if (error.msg && typeof error.msg === 'string') return error.msg;\n\n      // If it's an object with type, loc, msg, input, url (validation error object)\n      if (error.type && error.msg && typeof error.msg === 'string') return error.msg;\n\n      // If it's an object, try to stringify it safely\n      if (typeof error === 'object') {\n        // Try to get a meaningful message from the object\n        if (error.detail) return String(error.detail);\n        if (error.error) return String(error.error);\n\n        // Handle React Hook Form validation errors\n        if (error.type === 'required') return 'This field is required';\n        if (error.type === 'min') return error.message || 'Value is too low';\n        if (error.type === 'max') return error.message || 'Value is too high';\n        if (error.type === 'pattern') return error.message || 'Invalid format';\n        if (error.type === 'validate') return error.message || 'Invalid value';\n\n        // If it's a complex object, try to extract a meaningful message\n        const keys = Object.keys(error);\n        if (keys.length > 0) {\n          const firstKey = keys[0];\n          const firstValue = error[firstKey];\n          if (typeof firstValue === 'string') return firstValue;\n          if (firstValue && typeof firstValue === 'object' && firstValue.message) {\n            return String(firstValue.message);\n          }\n        }\n\n        // If we can't extract a meaningful message, return a safe fallback\n        return 'This field is required';\n      }\n\n      // Fallback - ensure we always return a string\n      return 'This field is required';\n    } catch (e) {\n      // If anything goes wrong, return a safe fallback\n      console.error('Error extracting error message:', e);\n      return 'This field is required';\n    }\n  };\n  if (!error) return null;\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: className,\n    children: getErrorMessage(error)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_c = SafeErrorDisplay;\nexport default SafeErrorDisplay;\nvar _c;\n$RefreshReg$(_c, \"SafeErrorDisplay\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SafeErrorDisplay","error","className","getErrorMessage","message","msg","type","detail","String","keys","Object","length","firstKey","firstValue","e","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/anasr/Downloads/HI/RAG-For-Research-v3/RAG-For-Research-v3/frontend/src/components/SafeErrorDisplay.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst SafeErrorDisplay = ({ error, className = \"text-red-500 text-sm mt-1\" }) => {\r\n  const getErrorMessage = (error) => {\r\n    try {\r\n      if (!error) return '';\r\n      \r\n      // If it's already a string, return it\r\n      if (typeof error === 'string') return error;\r\n      \r\n      // If it has a message property that's a string\r\n      if (error.message && typeof error.message === 'string') return error.message;\r\n      \r\n      // If it has a msg property that's a string\r\n      if (error.msg && typeof error.msg === 'string') return error.msg;\r\n      \r\n      // If it's an object with type, loc, msg, input, url (validation error object)\r\n      if (error.type && error.msg && typeof error.msg === 'string') return error.msg;\r\n      \r\n      // If it's an object, try to stringify it safely\r\n      if (typeof error === 'object') {\r\n        // Try to get a meaningful message from the object\r\n        if (error.detail) return String(error.detail);\r\n        if (error.error) return String(error.error);\r\n        \r\n        // Handle React Hook Form validation errors\r\n        if (error.type === 'required') return 'This field is required';\r\n        if (error.type === 'min') return error.message || 'Value is too low';\r\n        if (error.type === 'max') return error.message || 'Value is too high';\r\n        if (error.type === 'pattern') return error.message || 'Invalid format';\r\n        if (error.type === 'validate') return error.message || 'Invalid value';\r\n        \r\n        // If it's a complex object, try to extract a meaningful message\r\n        const keys = Object.keys(error);\r\n        if (keys.length > 0) {\r\n          const firstKey = keys[0];\r\n          const firstValue = error[firstKey];\r\n          if (typeof firstValue === 'string') return firstValue;\r\n          if (firstValue && typeof firstValue === 'object' && firstValue.message) {\r\n            return String(firstValue.message);\r\n          }\r\n        }\r\n        \r\n        // If we can't extract a meaningful message, return a safe fallback\r\n        return 'This field is required';\r\n      }\r\n      \r\n      // Fallback - ensure we always return a string\r\n      return 'This field is required';\r\n    } catch (e) {\r\n      // If anything goes wrong, return a safe fallback\r\n      console.error('Error extracting error message:', e);\r\n      return 'This field is required';\r\n    }\r\n  };\r\n\r\n  if (!error) return null;\r\n\r\n  return (\r\n    <p className={className}>\r\n      {getErrorMessage(error)}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default SafeErrorDisplay; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,KAAK;EAAEC,SAAS,GAAG;AAA4B,CAAC,KAAK;EAC/E,MAAMC,eAAe,GAAIF,KAAK,IAAK;IACjC,IAAI;MACF,IAAI,CAACA,KAAK,EAAE,OAAO,EAAE;;MAErB;MACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE,OAAOA,KAAK;;MAE3C;MACA,IAAIA,KAAK,CAACG,OAAO,IAAI,OAAOH,KAAK,CAACG,OAAO,KAAK,QAAQ,EAAE,OAAOH,KAAK,CAACG,OAAO;;MAE5E;MACA,IAAIH,KAAK,CAACI,GAAG,IAAI,OAAOJ,KAAK,CAACI,GAAG,KAAK,QAAQ,EAAE,OAAOJ,KAAK,CAACI,GAAG;;MAEhE;MACA,IAAIJ,KAAK,CAACK,IAAI,IAAIL,KAAK,CAACI,GAAG,IAAI,OAAOJ,KAAK,CAACI,GAAG,KAAK,QAAQ,EAAE,OAAOJ,KAAK,CAACI,GAAG;;MAE9E;MACA,IAAI,OAAOJ,KAAK,KAAK,QAAQ,EAAE;QAC7B;QACA,IAAIA,KAAK,CAACM,MAAM,EAAE,OAAOC,MAAM,CAACP,KAAK,CAACM,MAAM,CAAC;QAC7C,IAAIN,KAAK,CAACA,KAAK,EAAE,OAAOO,MAAM,CAACP,KAAK,CAACA,KAAK,CAAC;;QAE3C;QACA,IAAIA,KAAK,CAACK,IAAI,KAAK,UAAU,EAAE,OAAO,wBAAwB;QAC9D,IAAIL,KAAK,CAACK,IAAI,KAAK,KAAK,EAAE,OAAOL,KAAK,CAACG,OAAO,IAAI,kBAAkB;QACpE,IAAIH,KAAK,CAACK,IAAI,KAAK,KAAK,EAAE,OAAOL,KAAK,CAACG,OAAO,IAAI,mBAAmB;QACrE,IAAIH,KAAK,CAACK,IAAI,KAAK,SAAS,EAAE,OAAOL,KAAK,CAACG,OAAO,IAAI,gBAAgB;QACtE,IAAIH,KAAK,CAACK,IAAI,KAAK,UAAU,EAAE,OAAOL,KAAK,CAACG,OAAO,IAAI,eAAe;;QAEtE;QACA,MAAMK,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACR,KAAK,CAAC;QAC/B,IAAIQ,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;UACnB,MAAMC,QAAQ,GAAGH,IAAI,CAAC,CAAC,CAAC;UACxB,MAAMI,UAAU,GAAGZ,KAAK,CAACW,QAAQ,CAAC;UAClC,IAAI,OAAOC,UAAU,KAAK,QAAQ,EAAE,OAAOA,UAAU;UACrD,IAAIA,UAAU,IAAI,OAAOA,UAAU,KAAK,QAAQ,IAAIA,UAAU,CAACT,OAAO,EAAE;YACtE,OAAOI,MAAM,CAACK,UAAU,CAACT,OAAO,CAAC;UACnC;QACF;;QAEA;QACA,OAAO,wBAAwB;MACjC;;MAEA;MACA,OAAO,wBAAwB;IACjC,CAAC,CAAC,OAAOU,CAAC,EAAE;MACV;MACAC,OAAO,CAACd,KAAK,CAAC,iCAAiC,EAAEa,CAAC,CAAC;MACnD,OAAO,wBAAwB;IACjC;EACF,CAAC;EAED,IAAI,CAACb,KAAK,EAAE,OAAO,IAAI;EAEvB,oBACEF,OAAA;IAAGG,SAAS,EAAEA,SAAU;IAAAc,QAAA,EACrBb,eAAe,CAACF,KAAK;EAAC;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAER,CAAC;AAACC,EAAA,GA7DIrB,gBAAgB;AA+DtB,eAAeA,gBAAgB;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}